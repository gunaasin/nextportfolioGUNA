//@ts-check
import { expect } from "chai";
import { getSinon as sinon, cleanIt } from "reshow-unit-dom";
import { expireCallback } from "../index.mjs";
/**
 * @type import("sinon").SinonFakeTimers
 */
var timer;
describe("Test expireCallback", function () {
  beforeEach(function () {
    timer = sinon({
      useFakeTimers: true
    }).clock;
  });
  afterEach(function () {
    cleanIt();
  });
  it("test run with pass 0", function () {
    timer.tick(0);
    var acture = expireCallback(0, 1, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("foo");
  });
  it("test run with pass 1", function () {
    timer.tick(1);
    var acture = expireCallback(0, 1, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("foo");
  });
  it("test run with pass 2", function () {
    timer.tick(2);
    var acture = expireCallback(0, 1, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("bar");
  });
  it("test with expire", function () {
    var acture = expireCallback(0, -1, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("bar");
  });
  it("test create time not valid", function () {
    var acture = expireCallback(null, 0, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("bar");
  });
  it("test expire time not valid", function () {
    var acture = expireCallback(0, null, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("foo");
  });
  it("test expire time is zero", function () {
    timer.tick(1);
    var acture = expireCallback(0, 0, function () {
      return "foo";
    }, function () {
      return "bar";
    });
    expect(acture).to.equal("bar");
  });
});