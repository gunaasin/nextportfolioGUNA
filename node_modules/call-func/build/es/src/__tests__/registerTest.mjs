import { expect } from "chai";
import { cleanIt } from "reshow-unit";
import { create, inject } from "create-el";
import query from "css-query-selector";
import { register, cleanAllRegister } from "../register.mjs";
var keys = Object.keys;
describe("Test Register", function () {
  afterEach(function () {
    return cleanIt();
  });

  // https://github.com/jsdom/jsdom/issues/3331
  var Event = window.Event;
  it("basic test", function () {
    var span = create("span")()({
      id: "unit-span"
    });
    inject()(span);
    var oReg = register(span);
    var i = 0;
    var evId = oReg.addEventListener("click", function () {
      i++;
    });
    var click = new Event("click");
    span.dispatchEvent(click);
    expect(i).to.equal(1);
    span.dispatchEvent(click);
    oReg.removeEventListener(evId);
    span.dispatchEvent(click);
    expect(i).to.equal(2);
  });
  it("Compatiable with native event", function () {
    var span = create("span")()({
      id: "unit-span"
    });
    inject()(span);
    var i = 0;
    var func = function func() {
      i++;
    };
    register(span).addEventListener("click", func);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(1);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
    register(span).removeEventListener("click", func);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
  });
  it("Test clean all with one element", function () {
    var span = create("span")()({
      id: "unit-span"
    });
    inject()(span);
    var i = 0;
    var func = function func() {
      i++;
    };
    expect(keys(register(span).optionMap).length).to.equal(0);
    register(span).addEventListener("click", func);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(1);
    expect(keys(register(span).optionMap).length).to.equal(1);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
    register(span).cleanAll();
    expect(keys(register(span).optionMap).length).to.equal(0);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
  });
  it("Test cleanAll with type", function () {
    var span = create("span")()();
    inject()(span);
    var i = 0;
    var func = function func() {
      i++;
    };
    register(span).addEventListener("click", func);
    register(span).addEventListener("mousedown", func);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(1);
    span.dispatchEvent(new Event("mousedown"));
    expect(i).to.equal(2);
    register(span).cleanAll("click");
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
    span.dispatchEvent(new Event("mousedown"));
    expect(i).to.equal(3);
  });
  it("Test cleanAllRegister", function () {
    var span = create("span")()();
    var div = create("div")()();
    inject()(span);
    inject()(div);
    var i = 0;
    var func = function func() {
      i++;
    };
    register(span).addEventListener("click", func);
    register(div).addEventListener("click", func);
    span.dispatchEvent(new Event("click"));
    expect(i).to.equal(1);
    div.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
    cleanAllRegister();
    span.dispatchEvent(new Event("click"));
    div.dispatchEvent(new Event("click"));
    expect(i).to.equal(2);
  });
  it("Test with document", function () {
    var i = 0;
    var func = function func() {
      i++;
    };
    register(document).addEventListener("click", func);
    document.dispatchEvent(new Event("click"));
    expect(i).to.equal(1);
  });
  it("Test with window", function () {
    var i = 0;
    var func = function func() {
      i++;
    };
    register(window).addEventListener("click", func);
    window.dispatchEvent(new Event("click"));
    expect(i).to.equal(1);
  });
});