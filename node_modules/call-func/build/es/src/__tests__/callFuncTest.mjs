import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
// @ts-check

import { expect } from "chai";
import callfunc from "../callfunc.mjs";
describe("Test call func", function () {
  it("test call", function () {
    var check = false;
    var a = function a() {
      check = true;
    };
    callfunc(a);
    expect(check).to.be.true;
  });
  it("test call with params", function () {
    var check = false;
    var a = function a( /**@type any*/p) {
      check = p;
    };
    var result = callfunc(a, ["foo"]);
    expect(check).to.equal("foo");
    expect(result).to.equal(undefined);
  });
  it("test call with scope", function () {
    var uObj = /*#__PURE__*/function () {
      function uObj() {
        _classCallCheck(this, uObj);
      }
      _createClass(uObj, [{
        key: "a",
        value: function a( /**@type any*/_p, /**@type any*/hasThis) {
          if (hasThis) {
            expect(this).to.deep.equal({});
          } else {
            expect(this).to.be.undefined;
          }
        }
      }]);
      return uObj;
    }();
    var o = new uObj();
    callfunc(o.a, ["foo", true], {});
    callfunc(o.a, ["foo", false]);
  });
  it("test with return", function () {
    var func = function func() {
      for (var _len = arguments.length, p = new Array(_len), _key = 0; _key < _len; _key++) {
        p[_key] = arguments[_key];
      }
      return p;
    };
    expect(callfunc(func, ["foo", "bar"])).to.deep.equal(["foo", "bar"]);
  });
  it("test return null", function () {
    var actual1 = callfunc("foo");
    expect(actual1).to.equal("foo");
    var actual2 = callfunc("foo", null, null, null);
    expect(actual2).to.be.null;
  });
  it("test return with non-func", function () {
    expect(callfunc(undefined)).to.be.undefined;
  });
});