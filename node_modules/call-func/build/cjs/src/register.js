"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.register = exports.cleanAllRegister = void 0;
var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));
var _reshowConstant = require("reshow-constant");
var _callfunc = _interopRequireDefault(require("./callfunc.js"));
var count = {
  el: 0,
  opt: 0
};
var allWrapMap = {};
var wrapKey = "data-event-wrap-id";
var initEventWrap = function initEventWrap(el) {
  var wrapId = el.getAttribute ? el.getAttribute(wrapKey) : el[wrapKey];
  if (!wrapId) {
    wrapId = ++count.el;
    if (el.setAttribute) {
      el.setAttribute(wrapKey, wrapId);
    } else {
      el[wrapKey] = wrapId;
    }
  }
  var obj = allWrapMap[wrapId];
  if (!obj) {
    obj = new EventWrap(wrapId, el);
    allWrapMap[wrapId] = obj;
  }
  return obj;
};
var EventWrap = /*#__PURE__*/function () {
  function EventWrap(_id, el) {
    var _this = this;
    (0, _classCallCheck2["default"])(this, EventWrap);
    (0, _defineProperty2["default"])(this, "optionMap", {});
    (0, _defineProperty2["default"])(this, "typeMap", {});
    (0, _defineProperty2["default"])(this, "addEventListener", function (type, func) {
      var thisOptId = ++count.opt;
      var optionMap = _this.optionMap;
      for (var _len = arguments.length, options = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        options[_key - 2] = arguments[_key];
      }
      optionMap[thisOptId] = [type, func].concat(options);
      if (!_this.typeMap[type]) {
        _this.typeMap[type] = [];
      }
      _this.typeMap[type].push(thisOptId);
      (0, _callfunc["default"])(_this.el.addEventListener, optionMap[thisOptId], _this.el);
      return thisOptId;
    });
    (0, _defineProperty2["default"])(this, "removeEventListener", function (typeOrId, func) {
      var optionMap = _this.optionMap;
      var thisOptions;
      var id;
      if (!isNaN(typeOrId) && optionMap[typeOrId]) {
        id = typeOrId;
        thisOptions = optionMap[id];
      } else {
        for (var _len2 = arguments.length, options = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          options[_key2 - 2] = arguments[_key2];
        }
        thisOptions = [typeOrId, func].concat(options);
      }
      (0, _callfunc["default"])(_this.el.removeEventListener, thisOptions, _this.el);
      if (id) {
        var type = thisOptions[0];
        var thisTypeMap = _this.typeMap[type] || [];
        _this.typeMap[type] = thisTypeMap.filter(function (item) {
          return item != id;
        });
        delete optionMap[id];
      }
    });
    this.id = _id;
    this.el = el;
  }
  (0, _createClass2["default"])(EventWrap, [{
    key: "cleanAll",
    value: function cleanAll(type) {
      var _this2 = this;
      var optionMap = this.optionMap;
      if (null != type) {
        if (this.typeMap[type]) {
          this.typeMap[type].forEach(function (key) {
            _this2.removeEventListener(key);
          });
        }
      } else {
        (0, _reshowConstant.KEYS)(optionMap).forEach(function (key) {
          _this2.removeEventListener(key);
        });
      }
    }
  }]);
  return EventWrap;
}();
var register = exports.register = function register(el) {
  return initEventWrap(el);
};
var cleanAllRegister = exports.cleanAllRegister = function cleanAllRegister(type) {
  (0, _reshowConstant.KEYS)(allWrapMap).forEach(function (key) {
    allWrapMap[key].cleanAll(type);
  });
};