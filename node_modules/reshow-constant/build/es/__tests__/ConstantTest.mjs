import { expect } from "chai";
import { UNDEFINED, FUNCTION, OBJECT, DEFAULT, STRING, SYMBOL, SCRIPT, TYPE_ERROR, T_UNDEFINED, T_NULL, T_TRUE, T_FALSE, KEYS, IS_ARRAY, OBJ_SIZE, NEW_OBJ, HAS, REAL_TIME_URL, REAL_TIME_DATA_KEY } from "../index.mjs";
describe("Test Constant", function () {
  it("test undefined", function () {
    expect(UNDEFINED).to.equal("undefined");
  });
  it("test function", function () {
    expect(FUNCTION).to.equal("function");
  });
  it("test object", function () {
    expect(OBJECT).to.equal("object");
  });
  it("test default", function () {
    expect(DEFAULT).to.equal("default");
  });
  it("test string", function () {
    expect(STRING).to.equal("string");
  });
  it("test symbol", function () {
    expect(SYMBOL).to.equal("symbol");
  });
  it("test script", function () {
    expect(SCRIPT).to.equal("script");
  });
  it("test TYPE_ERROR", function () {
    expect(TYPE_ERROR).to.equal("TypeError");
  });
});
describe("Test Type", function () {
  it("test type undefined", function () {
    expect(T_UNDEFINED).to.be.undefined;
  });
  it("test type null", function () {
    expect(T_NULL).to.be.null;
  });
  it("test type true", function () {
    expect(T_TRUE).to.be.true;
  });
  it("test type false", function () {
    expect(T_FALSE).to.be.false;
  });
});
describe("Test FUNCTION", function () {
  it("test keys", function () {
    var a = {
      foo: "bar"
    };
    expect(KEYS(a)).to.deep.equal(["foo"]);
  });
  describe("Test IS_ARRAY", function () {
    it("test isArray to true", function () {
      var a = ["foo"];
      expect(IS_ARRAY(a)).to.be.true;
    });
    it("test is not Array", function () {
      var a = {
        foo: "bar"
      };
      expect(IS_ARRAY(a)).to.be.false;
    });
  });
  describe("Test OBJ_SIZE", function () {
    it("test is empty obj", function () {
      expect(OBJ_SIZE(null)).to.equal(0);
    });
    it("test is empty obj length", function () {
      expect(OBJ_SIZE({})).to.equal(0);
    });
    it("test is not empty obj", function () {
      expect(OBJ_SIZE({
        foo: "bar"
      })).to.equal(1);
    });
  });
  describe("Test NEW_OBJ", function () {
    it("basic", function () {
      expect(NEW_OBJ()).to.deep.equal({});
    });
  });
  describe("Test HAS", function () {
    it("test hasOwnProperty", function () {
      expect(HAS({
        foo: "bar"
      }, "foo")).to.be.true;
    });
    it("test Object.create(null)", function () {
      var foo = Object.create(null);
      foo.prop = "exists";
      expect(HAS(foo, "prop")).to.be.true;
    });
    it("test null or undefined", function () {
      expect(HAS(null)).to.be.false;
      expect(HAS(undefined)).to.be.false;
    });
    it("test key is null  or undefined", function () {
      expect(HAS({}, null)).to.be.false;
      expect(HAS({}, undefined)).to.be.false;
    });
  });
});
describe("Test Reshow Specific", function () {
  it("test REAL_TIME_URL", function () {
    expect(REAL_TIME_URL).to.equal("--rtime-url--");
  });
  it("test REAL_TIME_DATA_KEY", function () {
    expect(REAL_TIME_DATA_KEY).to.equal("--rtime-data--");
  });
});