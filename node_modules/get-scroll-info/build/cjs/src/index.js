"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.getScrollNode = exports["default"] = exports.ScrollInfoType = void 0;
var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));
var _defineProperty2 = _interopRequireDefault(require("reshow-runtime/helpers/defineProperty"));
var _winDoc = require("win-doc");
var _reshowConstant = require("reshow-constant");
var _getRandomId = require("get-random-id");
// @ts-check

var lastScrollStore = (0, _reshowConstant.NEW_OBJ)();

/**
 * @typedef {import("reshow-constant").SAFE_UNDEFINED} SAFE_UNDEFINED
 */

/**
 * @typedef {object & Document} ThisDocument
 * @property {function} webkitIsFullScreen
 */

/**
 * @type ThisDocument
 */
var oDoc;
var oWin;
var isWebkit;
var docEl;
var initDoc = function initDoc() {
  oDoc = (0, _winDoc.doc)();
  oWin = (0, _winDoc.win)();
  isWebkit = _reshowConstant.UNDEFINED !== typeof oDoc.webkitIsFullScreen;
  docEl = oDoc.documentElement;
};

/**
 * @param {SAFE_UNDEFINED|HTMLElement} [el]
 * @returns {HTMLElement}
 */
var getScrollNode = exports.getScrollNode = function getScrollNode(el) {
  if (!oDoc) {
    initDoc();
  }
  if (!el && oDoc) {
    if (oDoc.scrollingElement) {
      el = oDoc.scrollingElement;
    } else if (isWebkit) {
      el = oDoc.body;
    } else {
      el = docEl;
    }
  }
  var htmlEl = /** @type {HTMLElement}*/el;
  if (!htmlEl.id) {
    htmlEl.id = (0, _getRandomId.getSN)("scroll-info", "-");
  }
  return htmlEl;
};
var ScrollInfoType = exports.ScrollInfoType = /*#__PURE__*/(0, _createClass2["default"])(function ScrollInfoType() {
  (0, _classCallCheck2["default"])(this, ScrollInfoType);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "top", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "right", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "bottom", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "left", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "scrollWidth", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "scrollHeight", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "scrollNodeWidth", void 0);
  /**
   * @type number
   */
  (0, _defineProperty2["default"])(this, "scrollNodeHeight", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "atTop", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "atRight", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "atBottom", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "atLeft", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "isScrollUp", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "isScrollRight", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "isScrollDown", void 0);
  /**
   * @type boolean
   */
  (0, _defineProperty2["default"])(this, "isScrollLeft", void 0);
  /**
   * @type HTMLElement
   */
  (0, _defineProperty2["default"])(this, "scrollEl", void 0);
});
/**
 * @param {SAFE_UNDEFINED|HTMLElement} [inputEl]
 * @returns {ScrollInfoType}
 */
var getScrollInfo = function getScrollInfo(inputEl, margin) {
  if (margin === void 0) {
    margin = 50;
  }
  var w;
  var h;
  var el = getScrollNode(inputEl);
  var nodeName = (el.nodeName || "").toLowerCase();
  var isRoot = "body" === nodeName || "html" === nodeName;

  // defined scrollWidth and scrollHeight first.
  // to know if have vertical or horizontal bar.
  var scrollWidth = el.scrollWidth;
  var scrollHeight = el.scrollHeight;
  if (isRoot) {
    w = Math.max(el.clientWidth || 0, oWin.innerWidth || 0);
    h = Math.max(el.clientHeight || 0, oWin.innerHeight || 0);
    var hasHorizontalBar = w < scrollWidth;
    var hasVerticalBar = h < scrollHeight;
    if (hasHorizontalBar) {
      h = el.clientHeight;
    }
    if (hasVerticalBar) {
      w = el.clientWidth;
    }
  } else {
    var _el$clientWidth, _el$clientHeight;
    w = (_el$clientWidth = el.clientWidth) !== null && _el$clientWidth !== void 0 ? _el$clientWidth : el.scrollWidth;
    h = (_el$clientHeight = el.clientHeight) !== null && _el$clientHeight !== void 0 ? _el$clientHeight : el.scrollHeight;
  }
  var scrollLeft = el.scrollLeft;
  var scrollTop = el.scrollTop;
  var scrollBottom = scrollTop + h;
  var scrollRight = scrollLeft + w;
  var elId = el.id;
  var lastScroll = lastScrollStore[elId];
  var info = {
    atTop: scrollTop < margin,
    atRight: scrollRight > scrollWidth - margin,
    atBottom: scrollBottom > scrollHeight - margin,
    atLeft: scrollLeft < margin,
    isScrollUp: lastScroll && scrollTop < lastScroll.top,
    isScrollRight: lastScroll && scrollLeft > lastScroll.left,
    isScrollDown: lastScroll && scrollTop > lastScroll.top,
    isScrollLeft: lastScroll && scrollLeft < lastScroll.left,
    scrollWidth: scrollWidth,
    scrollHeight: scrollHeight,
    scrollNodeWidth: w,
    scrollNodeHeight: h,
    top: scrollTop,
    right: scrollRight,
    bottom: scrollBottom,
    left: scrollLeft,
    scrollEl: el
  };
  lastScrollStore[elId] = info;
  return info;
};
var _default = exports["default"] = getScrollInfo;